OAuth for frontend
https://developer.spotify.com/dashboard/applications/2a579830cc5c49868d8c059d4b67f484/users
https://oauth.io/dashboard/app/V8PFXacmHXWC3sCIpbeJ75pdH34/spotify
-> Scopes for user's recently played tracks and top artists and tracks
https://developer.spotify.com/documentation/general/guides/authorization/scopes/#user-read-recently-played
 -> https://developer.spotify.com/documentation/web-api/reference/#/operations/get-the-users-currently-playing-track
https://developer.spotify.com/documentation/general/guides/authorization/scopes/#user-top-read
 -> https://developer.spotify.com/documentation/web-api/reference/#/operations/get-users-top-artists-and-tracks
-> Supposed to do OAuth with PKCE secrets since i'll be doing OAuth from the browser and Spotify apparently requires secrets?

JS for oauth.io
https://github.com/oauth-io/oauth-js

TODO - add to existing frontend (fork from HTM)
 Not sure how to get the JS into my TSX+React
	https://github.com/UnusualAbsurd/discord-oauth/tree/main/src/pages/api/auth 
		-> This project built in TS+React at least.  Manual OAuth though.
	https://fusionauth.io/blog/2020/03/10/securely-implement-oauth-in-react
	https://hceris.com/oauth-authorization-code-flow-pkce-for-react/ -> Uses Auth0. Seems good.


Arbi or Optimism deployment


1. OAuth in browser
	https://auth0.com/developers/hub/code-samples/spa/react-typescript/basic-authentication
	https://manage.auth0.com/dashboard/us/dev-fk8zylnc/ -> Auth0 -> 
	Auth0 could be central portal to manage other platforms in addition to Spotify too?
		doesn't seem I can customize Spotify API scopes to authorize the APIs that i want.
		Turns out that the scopes don't control the API security anyway. It's more of a user thing. 
		So i guess just don't do custom OAUth for now. Not sure what the issue is but SpotifyCustom in Auth0 isnt working.
		...doesn't appear to give an access token for Spotify though anyway.
	https://blog.bitsrc.io/create-a-reusable-oauth-react-component-with-oauth-io-and-bit-72cd2d6dbee7 
		-> Works for OAuth.io setup and is simple.
	//1. Pass Access Token into MintNFT frontend from the Header
		Class to Class: https://javascript.plainenglish.io/how-to-pass-data-between-react-class-components-f887619c40a4
		Class to Function: https://stackoverflow.com/questions/61171028/pass-state-from-class-component-to-function-component-in-react
    	//2. Allow Minting original Soulbound NFT [Fanside]
		1. DONE figure out how to make API call with Access Token
			Don't add ID from /me call -> a bigger Dox than other things
		2. Pull metadata to browser/console to display.
		 	DONE Can pull profile image to the current image location w default to some FanLinked image
			DONE Pull artist info and display for fun.
			TODO - add info about total ownership? Should be able to query onchain but not sure how.
				***needed to refactor a bunch of data structures and added View functions - I need to manually track ownership for interactions since ERC1155 doesn't build that in. 
		3. DONE for v1 - Connect Mint button to Kovan FanLink contract.
   	 //3. Allow Update somehow? [Fanside]
		1. FUTURE Right now - update automatically via batchmint - increments counts. Should add a timelock for like every 30 days or year or something.
		2. DONE Display current Fandom from NFT at connected address. 
			***-> GIGANTIC issue with an error like "TypeError: Cannot read properties of null (reading 'call') at Contract.<anonymous>" -
				***needed to add library from useEthers in a new Contract instantiation rather than the useContract helper function from CL video. Some sort of issue with Contract declaration and ABIs
   	 //4. Allow interactions [Artistside]
		-> Log in, detect artist(?), search by artist, take actions for fans
			FUTURE - detect "artist" user type from Spotify (if that's even a valid thing)
			DONE - artist pane as just "Connect as artist"
			TODO - pull/fake some metadata about the connected artist - arguably anyone should be able to use these tools though.
			DONE - add some artist lookup for now.
2. ERC1155 contract logic for minting soulbound NFTs via OAuth. -> 0x81826b25831E7ECd3cAf8553fe19C2BC100eaDF0
	DONE How to soulbound? nontransferrable property? - override transfer functions via require statements. Seems like there should be a way to just remove - hard to find though.
	DONE No initial token capacity? batchMint allows dynamic minting across new IDs
	DONE just store artist IDs. can display everything in frontend. - need to map spotify artist ID to uint256 though.
	FUTURE Do i need an EA to do the minting? Force API compliance and can Whitelist the EA address for batchMint rather than public. 
		Since these are Soulbound it's not the end of the world for a v1 if any account can manually mint. Pass access_token to EA to make API calls.
		EA -> 
			1. DONE connect to oauth per normal
			2. DONE on Mint -> generate VRF from a simple VRF contract (ie remix example)
				DONE 2a. wait for vrf to finish - ethers can check for events using contract.once https://github.com/ethers-io/ethers.js/issues/296
			3. FUTURE - Storage in AWS EA is an issue - generate OTP from VRF - encode access token call "mintBatchEA"
			4. mintBatchEA calls EA
			5. from FE, send EA tx+OTP key
			6. EA can then do operations and post back
				6a. Translate json parse from FE to EA
	FUTURE - timelock the minting/updating - note that minting/updating via incrementing is all done via the same batchMint.
		Would need to add a new "Lastupdated" to owners array and a view function for it to check in frontend.
	DONE for v1 of contract - deploy to hook up to frontend. 
3. CL-ed contract for artist tools -> 0x3aF6c49068Cd8c947d4786A009b56B3EcbbA5782 (v2 - price feed + VRF)
	DONE will need to simulate an artist login for demonstrative purposes.
	TODO create CLed artist tools solidity contract for interacting with my deployed one - https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c
		DONE price feed ticket - hook into value field of message to deliver to fans. Does conversion of USD to ETH via Frontend input and contract logic to send to Tx.
			DONE - frontend calculates total amount that goes into Payable ticket purchase tx. Solidity contract checks it.
			-> ***gwei/wei etc manipulation is tricky here
		6SSXfZGnJaNajWRPGHq4JL - red city radio
		DONE VRF lottery for ticket cost to a fan.
		FUTURE Keeper timelock attached to VRF.
			TODO - need new mapping with Address (owner) -> Struct of Active boolean and LastUpdated timestamp.
	FUTURE - Artists get to take more control over their token ID like setting metadata? You'd need an EA that they could prove their Spotify artist ownership and tie it to an address.
	FUTURE - NFT implementation to airdrop NFTs to fans -> https://ethereum.stackexchange.com/questions/27778/distribute-token-to-multiple-address
	
Testing EA
curl.exe -X POST -H "content-type:application/json" "https://3kr1j0qhya.execute-api.us-east-2.amazonaws.com/default/cl-oauth-spotify" --data '{\"id\": \"0\", \"data\": { \"OTP_token\": \"BQCRd-9WFu1SL3Ryr0Sr7tyHRbTElt00vF-MfXO_DwnnhLMaw8q_5GoK9st672F0hTccxclinXGub0GRDsjd8eF2eIOPynr7W5vJ616KdgLkrWhF7fHL1hRYzNMwPY_YXe3N79I2OKG-KzrWlYkkQiD_Ow\" } }'

https://open.spotify.com/artist/4uYF9xTeidr0QG4JlsLjeO?si=zRjXxz0fTR-xfMlpzKLvSA


            